__author__ = 'Сидоров Артем Андреевич'
# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

from math import sqrt
work_list = [int(i) for i in input('Введите свой список чисел через пробел: ').split()]
new_list = []
for i in work_list:
    if i < 0 or sqrt(i) % 1 > 0:
        pass
    else:
        new_list.append(int(sqrt(i)))
print(new_list)

# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

days_list = ['первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятое', 'одиннадцатое', 'двенадцатое', 'тринадцатое', 'четырнадцатое', 'пятнадцатое', 'шестнадцатое', 'семнадцатое', 'восемнадцатое', 'девятнадцатое', 'двадцатое', 'двадцать первое', 'двадцать второе', 'двадцать третье', 'двадцать четвертое', 'двадцать пятое', 'двадцать шестое', 'двадцать седьмое', 'двадцать восьмое', 'двадцать девятое', 'тридцатое', 'тридцать первое']
dict_days = dict((i + 1, days_list[i]) for i in range(len(days_list)))
month_list = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
dict_months = dict((i + 1, month_list[i]) for i in range(len(month_list)))
x = '33.06.2012'
x = [int(i) for i in x.split('.')]
if x[0] in dict_days.keys() and x[1] in dict_months.keys():
    if x[1] == 2:
        if x[2] % 4 != 0 or (x[2] % 100 == 0 and x[2] % 400 != 0):
            if x[0] > 28:
                print('В феврале может быть только 28 дней в обычный год')
            elif x[0] <= 28:
                print(f'{dict_days[x[0]]} {dict_months[x[1]]} {x[2]} года')
        else :
                if x[0] > 29:
                    print('В феврале может быть максимум 29 дней!')
                elif x[0] <= 29:
                    print(f'{dict_days[x[0]]} {dict_months[x[1]]} {x[2]} года')     
    elif (x[1] == 4 or x[1] == 6 or x[1] == 9 or x[1] == 11) and x[0] == 31:
        print(f'Столько дней {dict_months[x[1]]} не длится')
    else: 
        print(f'{dict_days[x[0]]} {dict_months[x[1]]} {x[2]} года')
else:
    print('О, какой страшный месяц нисан в этом году!')


'''
Второй вариант идентичен первому - только выделяем основной блок проверки в функцию
на случай необходимости вывода дат несколько раз в сценарии или программе.
'''

def date_trans(day, month, year):
    if day in dict_days.keys() and month in dict_months.keys():
        if month == 2:
            if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):
                if day > 28:
                    print('В феврале может быть только 28 дней в обычный год')
                elif day <= 28:
                    print(f'{dict_days[day]} {dict_months[month]} {year} года')
            else :
                    if day > 29:
                        print('В феврале может быть максимум 29 дней!')
                    elif day <= 29:
                        print(f'{dict_days[day]} {dict_months[month]} {year} года')     
        elif (month == 4 or month == 6 or month == 9 or month == 11) and day == 31:
            print(f'Столько дней {dict_months[month]} не длится')
        else: 
            print(f'{dict_days[day]} {dict_months[month]} {year} года')
    else:
        print('О, какой страшный месяц нисан в этом году!')

days_list = ['первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятое', 'одиннадцатое', 'двенадцатое', 'тринадцатое', 'четырнадцатое', 'пятнадцатое', 'шестнадцатое', 'семнадцатое', 'восемнадцатое', 'девятнадцатое', 'двадцатое', 'двадцать первое', 'двадцать второе', 'двадцать третье', 'двадцать четвертое', 'двадцать пятое', 'двадцать шестое', 'двадцать седьмое', 'двадцать восьмое', 'двадцать девятое', 'тридцатое', 'тридцать первое']
dict_days = dict((i + 1, days_list[i]) for i in range(len(days_list)))
month_list = ['января', 'февраля', 'марта', 'апреля', 'мая', 'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря']
dict_months = dict((i + 1, month_list[i]) for i in range(len(month_list)))
x = '22.06.2017'
x = [int(i) for i in x.split('.')]
date_trans(x[0], x[1], x[2])

# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random
from random import randint
rnd_list = [randint(-100, 100) for i in range(int(input('Введите количество элементов будущего списка: ')))]
print(rnd_list)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут: 
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]
my_list = [int(i) for i in input('Ввод чисел через пробел: ').split()]
#Список уникальных значений:
unique_list = list(set(my_list[:]))
print(f'Неповторяющиеся элементы списка: {unique_list}')
#Список значений без повторений
without_retry = []
for i in my_list:
    if my_list.count(i) > 1:
        without_retry.append(i)
without_retry = set(without_retry)
my_list = set(my_list)
my_list.difference_update(without_retry)
my_list = list(my_list)
print(f'Элементы списка без повторов: {my_list}')


